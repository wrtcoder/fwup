# Firmware configuration file

# This configuration file will create an image that
# has an MBR and the following layout:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | U-Boot (384K max)          |
# +----------------------------+
# | U-Boot environment (8K)    |
# +----------------------------+
# | p1: Rootfs A (ext4)        |
# +----------------------------+
# | p2: Rootfs B (ext4)        |
# +----------------------------+
# | p3: Application (ext4)     |
# +----------------------------+
# | p4: Unused                 |
# +----------------------------+

define(UBOOT_OFFSET, 256)
define(UBOOT_COUNT, 768)
define(UBOOT_ENV_OFFSET, 1024)
define(UBOOT_ENV_COUNT, 8)

# Let the rootfs have room to grow up to 32 MiB.
define-eval(ROOTFS_A_PART_OFFSET, "${UBOOT_ENV_OFFSET}+${UBOOT_ENV_COUNT}")
define(ROOTFS_A_PART_COUNT, 65536)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET}+${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, 65536)

# Application partition 64 MiB
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET}+${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 262144)

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource u-boot {
    host-path = "${BINARIES_DIR}/u-boot"
}
file-resource uboot-env.bin {
    host-path = "${BINARIES_DIR}/uboot-env.bin"
}
file-resource uboot-env.bin {
    host-path = "${BINARIES_DIR}/uboot-env.bin"
}
file-resource rootfs.img {
    host-path = "${BINARIES_DIR}/rootfs.ext2"
}

mbr mbr {
    partition 0 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
    # partition 3 is unused
}

uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run at the factory to initialize a board!
task complete {
    on-init {
        mbr_write(mbr)
    }

    on-resource uboot-env.bin {
        # Boot to the A partition first and don't fail back.
        # If this fails, we bricked the board with no recovery.
        raw_write(${UBOOT_ENV_OFFSET})
    }
    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Initialize the app partition

        # Qemu uses the image file size as the SDCard/eMMC size,
        # so we need to pad it out. This isn't necessary for
        # real devices..
        raw_memset(${APP_PART_OFFSET}, ${APP_PART_COUNT}, 255)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-uboot-variable(uboot-env, "boot", "2")

    on-init {
    }

    # Write the new firmware and Linux images, but don't
    # commit them. That way if the user aborts midway, we
    # still are using the original firmware.
    on-resource rootfs.img {
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Reset the validation status and boot to A
        # next time.
        uboot_setenv(uboot-env, "firmware_validated", 0)
        uboot_setenv(uboot-env, "boot", "1")
        uboot_setenv(uboot-env, "booted", 0)
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-uboot-variable(uboot-env, "boot", "1")

    on-init {
    }

    on-resource rootfs.img {
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Reset the validation status and boot to B
        # next time.
        uboot_setenv(uboot-env, "firmware_validated", 0)
        uboot_setenv(uboot-env, "boot", "2")
        uboot_setenv(uboot-env, "booted", 0)
    }

    on-error {
    }
}
