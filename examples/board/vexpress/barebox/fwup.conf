# Firmware configuration file

# Default paths if not specified via the commandline
define(ROOTFS, "${BINARIES_DIR}/rootfs.squashfs")

# This configuration file will create an image that
# has an MBR and the following 3 partitions:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | U-Boot environment         |
# +----------------------------+
# | *p1: Rootfs A (squashfs)   |
# +----------------------------+
# | *p1: Rootfs B (squashfs)   |
# +----------------------------+
# | p2: Application (FAT32)    |
# +----------------------------+
# | p3: Unused                 |
# +----------------------------+
# | p4: Unused                 |
# +----------------------------+
#
# The p1 partition points to whichever of Rootfs A or B that
# is active.

define(UBOOT_ENV_OFFSET, 16)
define(UBOOT_ENV_COUNT, 16)

# Let the rootfs have room to grow up to 32 MiB.
define-eval(ROOTFS_A_PART_OFFSET, "${UBOOT_ENV_OFFSET}+${UBOOT_ENV_COUNT}")
define(ROOTFS_A_PART_COUNT, 65536)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET}+${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, 65536)

# Application partition 256 MiB
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET}+${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 524288)

# Firmware metadata
meta-product = "Nerves Firmware"
meta-description = ""
meta-version = ${NERVES_SDK_VERSION}
meta-platform = "vexpress"
meta-architecture = "arm"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource rootfs.img {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
     partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0xc # FAT32
    }
    # partition 3 is unused
}

mbr mbr-b {
    partition 0 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0xc # FAT32
    }
    # partition 3 is unused
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
    }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Initialize the app partition last so that the boot
        # partition can be written in one go.
        fat_mkfs(${APP_PART_OFFSET}, ${APP_PART_COUNT})
        fat_setlabel(${APP_PART_OFFSET}, "APPDATA")
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-partition1-offset = ${ROOTFS_B_PART_OFFSET}

    # Since the upgrade won't run until it has been finalized, it's ok
    # to write data as it is read.
    verify-on-the-fly = true

    on-init {
        # Erase any old saved files from previous upgrades
        fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")
        fat_rm(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.pre")
    }

    # Write the new firmware and Linux images, but don't
    # commit them. That way if the user aborts midway, we
    # still are using the original firmware.
    on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage.new") }
    on-resource vexpress-v2p-ca9.dtb { fat_write(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.new") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
	# Switch over to boot the new firmware
        mbr_write(mbr-a)

        fat_mv(${BOOT_PART_OFFSET}, "zImage", "zImage.pre")
        fat_mv(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb", "vexpress-v2p-ca9.dtb.pre")

        fat_mv(${BOOT_PART_OFFSET}, "zImage.new", "zImage")
        fat_mv(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.new", "vexpress-v2p-ca9.dtb")
    }

    on-error {
        # Clean up in case something goes wrong
        fat_rm(${BOOT_PART_OFFSET}, "zImage.new")
        fat_rm(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.new")
        fat_rm(${BOOT_PART_OFFSET}, "am335x-bonegreen.dtb.new")
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition1-offset = ${ROOTFS_A_PART_OFFSET}

    # Since the upgrade won't run until it has been finalized, it's ok
    # to write data as it is read.
    verify-on-the-fly = true

    on-init {
        fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")
        fat_rm(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.pre")
        fat_rm(${BOOT_PART_OFFSET}, "am335x-bonegreen.dtb.pre")
    }

    on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage.new") }
    on-resource vexpress-v2p-ca9.dtb { fat_write(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.new") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
	# Switch over to boot the new firmware
        mbr_write(mbr-b)

        fat_mv(${BOOT_PART_OFFSET}, "zImage", "zImage.pre")
        fat_mv(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb", "vexpress-v2p-ca9.dtb.pre")

        fat_mv(${BOOT_PART_OFFSET}, "zImage.new", "zImage")
        fat_mv(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.new", "vexpress-v2p-ca9.dtb")
    }

    on-error {
        # Clean up in case something goes wrong
        fat_rm(${BOOT_PART_OFFSET}, "zImage.new")
        fat_rm(${BOOT_PART_OFFSET}, "vexpress-v2p-ca9.dtb.new")
    }
}
